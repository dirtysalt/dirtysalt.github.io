#+title: Applied Philosophy, a.k.a "Hacking"

http://paulbuchheit.blogspot.com/2009/10/applied-philosophy-aka-hacking.html

Every system has two sets of rules: The rules as they are intended or commonly perceived, and the actual rules ("reality"). In most complex systems, the gap between these two sets of rules is huge. （每个系统都存在两套规则，一套是故意设计出来的并且为大多数人所知道的，而另外一套则是实际运行的。在复杂的系统中，两套规则差别非常大）

Sometimes we catch a glimpse of the truth, and discover the actual rules of a system. Once the actual rules are known, it may be possible to perform "miracles" -- things which violate the perceived rules.（有时候我们能够一瞥到这个系统实际情况，然后发现整个系统的实际规则。一旦这个实际规则被发现后，那么就有可能创造奇迹。这种奇迹完全地违反了那些大多人认知的规则）

Hacking is most commonly associated with computers, and people who break into or otherwise subvert computer systems are often called hackers. Although this terminology is occasionally disputed, I think it is essentially correct -- these hackers are discovering the actual rules of the computer systems (e.g. buffer overflows), and using them to circumvent the intended rules of the system (typically access controls). The same is true of the hackers who break DRM or other systems of control.

Writing clever (or sometimes ugly) code is also described as hacking. In this case the hacker is violating the rules of how we expect software to be written. If there's a project that should take months to write, and someone manages to hack it out in a single evening, that's a small miracle, and a major hack. If the result is simple and beautiful because the hacker discovered a better solution, we may describe the hack as "elegant" or "brilliant". If the result is complex and hard to understand (perhaps it violates many layers of abstraction), then we will call it an "ugly hack". Ugly hacks aren't all bad though -- one of my favorite personal hacks was some messy code that demonstrated what would become AdSense ([[http://paulbuchheit.blogspot.com/2009/01/communicating-with-code.html][story here]] ), and although the code was quickly discarded, it did it's job.

Hacking isn't limited to computers though. Wherever there are systems, there is the potential for hacking, and there are systems everywhere. Our entire reality is systems of systems, all the way down. This includes human relations (see [[http://www.amazon.com/Game-Penetrating-Secret-Society-Artists/dp/0060554738/][The Game]] for an very amusing story of people hacking human attraction), health ([[http://blog.sethroberts.net/][Seth Roberts]] has some interesting ideas), sports ([[http://en.wikipedia.org/wiki/Timothy_Ferriss][Tim Ferriss]] claims to have hacked the National Chinese Kickboxing championship), and finance ("too big to fail").（Hacking不仅限于计算机，只要有系统的地方，那么就有hacking的机会，并且实际上到处都是系，而这个现实社会就是这些系统的系统）

We're often told that there are no shortcuts to success -- that it's all a matter of hard work and doing what we're told. The hacking mindset takes there opposite approach: There are always shortcuts and loopholes. For this reason, hacking is sometimes perceived as cheating, or unfair, and it can be. Using social hacks to steal billions of dollars is wrong (see Madoff). On the other hand, automation seems like a great hack -- getting machines to do our work enabled a much higher standard of living, though as always, not everyone sees it that way (the [[http://en.wikipedia.org/wiki/Luddite][Luddites]] weren't big fans).（我们经常被告知说成功没有捷径，只有努力工作并且做好被嘱咐的事情。Hacking则完全采取相反的态度，认为到处都有捷径和漏洞。实用社交hack来窃取金钱是不对，但是类似自动化这种hack方式却可以提高人们的生活质量）

Important new businesses are usually some kind of hack. The established businesses think they understand the system and have setup rules to guard their profits and prevent real competition. New businesses must find a gap in the rules -- something that the established powers either don't see, or don't perceive as important. That was certainly the case with Google: the existing search engines (which thought of themselves as portals) believed that search quality wasn't very important (regular people can't tell the difference), and that search wasn't very valuable anyway, since it sends people away from your site. Google's success came in large part from recognizing that others were wrong on both points.（成熟商业熟知整个系统，会制定规则来保护自己的利益并且阻止竞争。而新型商业则必须从这些规则中找到漏洞，发现一些成熟商业没有看到或者是认为不重要的东西）

In fact, the entire process of building a business and having other people and computers do the work for you is a big hack. Nobody ever created a billion dollars through direct physical labor -- it requires some major shortcuts to create that much wealth, and by definition those shortcuts were mostly invisible to others (though many will dispute it after the fact). Startup investing takes this hack to the next level by having other people do the work of building the business, though finding the right people and businesses is not easy.（在建立整个商业的过程中，让其他人以及计算机来干活则是一个最大的hack。没有人能够仅仅靠自己的体力劳动就可以赚到很多钱，必须通过比较大的捷径才能够创造许多财富，而这些捷径别人往往没有看到（甚至很多人了解之后都会觉得不屑）。初创公司想发展壮大就必须找其他人来帮助发展商业，虽然找到合适的人和商业并不容易）

Not everyone has the hacker mindset (society requires a variety of personalities), but wherever and whenever there were people, there was someone staring into the system, searching for the truth. Some of those people were content to simply find a truth, but others used their discoveries to hack the system, to transform the world. These are the people that created the governments, businesses, religions, and other machines that operate our society, and they necessarily did it by hacking the prior systems. (consider the challenge of establishing a successful new government or religion -- the incumbents won't give up easily)（一些人仅仅满足于发现事实，而会有另外一部分人通过他们的洞察来hack这个系统，转变这个世界。正是这些人创造了政府，商业，宗教，以及其他机器来管理我们的社会，通过hacking原来的系统）

To discover great hacks, we must always be searching for the true nature of our reality, while acknowledging that we do not currently possess the truth, and never will. Hacking is much bigger and more important than clever bits of code in a computer -- it's how we create the future.（为了能够发现更伟大的hack，我们必须不断去寻找我们现实社会的真理，同时告诉自己，我们现在没有持有真理并且永远也不会。Hacking的意义远比那些存在在电脑里面那些灵巧的代码要大并且重要，正是因为它我们才能创造明天）

Or at least that's how I see it. Maybe I'll change my mind later.

