#+title: OSTEP / Virt-VAX/VMS

[OSTEP](http://pages.cs.wisc.edu/~remzi/OSTEP/)

kernel会被映射到用户地址空间?! 对于每个进程来说, 高地址虚拟内存中都是同样的内容(kernel image). kernel使用的物理内存也由VMS来管理, 这样一来: 1. kernel和userspace交换数据更加方便, 都是在同一个虚拟地址空间下进行 2. kernel可以获得VMS带来的各种好处比如可以使用大于物理内存的空间(来管理各种数据结构比如page table)而不要手动swap.

Perhaps more importantly, the kernel virtual address space (i.e., its
data structures and code) is a part of each user address space. On a context
switch, the OS changes the P0 and P1 registers to point to the appropriate
page tables of the soon-to-be-run process; however, it does not
change the S base and bound registers, and as a result the “same” kernel
structures are mapped into each user address space

The kernel is mapped into each address space for a number of reasons.
This construction makes life easier for the kernel; when, for example, the
OS is handed a pointer from a user program (e.g., on a write() system
call), it is easy to copy data from that pointer to its own structures. The
OS is naturally written and compiled, without worry of where the data
it is accessing comes from. If in contrast the kernel were located entirely
in physical memory, it would be quite hard to do things like swap pages
of the page table to disk; if the kernel were given its own address space,
moving data between user applications and the kernel would again be
complicated and painful. With this construction (now used widely), the
kernel appears almost as a library to applications, albeit a protected one.

One last point about this address space relates to protection. Clearly,
the OS does not want user applications reading or writing OS data or
code. Thus, the hardware must support different protection levels for
pages to enable this. The VAX did so by specifying, in protection bits
in the page table, what privilege level the CPU must be at in order to
access a particular page. Thus, system data and code are set to a higher
level of protection than user data and code; an attempted access to such
information from user code will generate a trap into the OS, and (you
guessed it) the likely termination of the offending process
```
