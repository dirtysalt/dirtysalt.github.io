#+title: Church Counter(邱奇计数)

#+BEGIN_SRC scheme
(define zero (lambda (f) (lambda (x) x)))
(define (add-1 n) (lambda (f) (lambda (x) (f ((n f) x)))))
#+END_SRC

我们把zero带入add-1
#+BEGIN_EXAMPLE
(lambda (f) (lambda (x) (f ((lambda (f) (lambda (x) x)) f) x)))
 => (lambda (f) (lambda (x) (f ((lambda (x) x) x))))
 => (lambda (f) (lambda (x) (f x)))
#+END_EXAMPLE
这个时候我们可以和zero比较，就会发现里面多了一次f操作，这就是计数操作

one, two可以写为
#+BEGIN_SRC scheme
(define one (lambda (f) (lambda (x) (f x))))
(define two (lambda (f) (lambda (x) (f (f x)))))
#+END_SRC

(add m n)可以写为
#+BEGIN_SRC scheme
(define (add m n) (lambda (f) (lambda (x) ((m f) ((n f) x)))))
#+END_SRC

下面摘自 《[[file:a-programmers-rantings.org][程序员的呐喊]]》
#+BEGIN_QUOTE
在最遥远的国度，比函数式王国更远的地方，有一种传说中的地带叫做lambda the ultimate。相传那个地方根本没有名词，只有动词。虽然那里有东西，但它们皆由动词创造，若传闻不虚，那地方连睡觉前数羊用的数字也不例外，而羊是当地最流行的货币。数字0就是lambda(), 1则是lambda(lambda()), 2则是lambda(lambda(lambda()), 以此类推。在这个传奇国度，每样东西不管是名词动词还是其他什么，都是由lambda这个初始动词开始构建出来的。
#+END_QUOTE
