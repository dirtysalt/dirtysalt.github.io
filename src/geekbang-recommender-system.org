#+title: 极客时间|推荐系统36式 文章目录
#+options: num:nil


** [[https://time.geekbang.org/column/article/3599][开篇词 | 用知识去对抗技术不平等]]

推荐系统的技术实践中，大厂们一骑绝尘，然而更普遍的是：太多中小厂、工程师们还不知道一个推荐系统如何才能从...


** [[https://time.geekbang.org/column/article/4318][【概念篇】你真的需要个性化推荐系统吗?]]

在问“该怎么做”之前，先来回答一下“要不要做”，我先帮你更加透彻地理解“推荐系统”这个概念，只有彻底理解...


** [[https://time.geekbang.org/column/article/4340][【概念篇】个性化推荐系统那些绕不开的经典问题]]

推荐系统发展到了今天，已经出现了一些常见的问题，一部分已经有很好的解决方案，另外一部分却还没有通用解决方...


** [[https://time.geekbang.org/column/article/4417][【概念篇】这些你必须应该具备的思维模式]]

我主要带你认识两方面的内容：一个是重新认识推荐系统关键元素的重要性，另一个是要建立起两个思维模式。


** [[https://time.geekbang.org/column/article/4574][【内容推荐】画鬼容易画人难：用户画像的“能”和“不能”]]

用户画像比较抽象，就像每个人都听说过鬼，但很少有人见过。事实上，它也没有那么神秘，只是大家对它有误解，要...


** [[https://time.geekbang.org/column/article/4635][【内容推荐】从文本到用户画像有多远]]

对于一个早期的推荐系统来说，基于内容推荐离不开为用户构建一个初级的画像，从大量文本数据中挖掘用户画像会常...


** [[https://time.geekbang.org/column/article/4674][【内容推荐】超越标签的内容推荐系统]]

所谓的基于内容推荐，通俗一点来讲，就是一个包装成推荐系统的信息检索系统。这听上去有点残酷，但通常一个复杂...


** [[https://time.geekbang.org/column/article/4802][【近邻推荐】人以群分，你是什么人就看到什么世界]]

把用户按照兴趣口味聚类成不同的群体，给用户产生的推荐就来自这个群体的平均值；所以要做好这个推荐，关键是如...


** [[https://time.geekbang.org/column/article/4856][【近邻推荐】解密“看了又看”和“买了又买”]]

如果做推荐系统不知道“基于物品的协同过滤”，那等同于做程序员不懂得冒泡排序。这个朴素的算法，就像是乔峰大...


** [[https://time.geekbang.org/column/article/4859][【近邻推荐】协同过滤中的相似度计算方法有哪些]]

推荐系统中，推荐算法分为两个门派，一个是机器学习派，另一个就是相似度门派。机器学习派是后起之秀，而相似度...


** [[https://time.geekbang.org/column/article/5030][【矩阵分解】那些在Netflix Prize中大放异彩的推荐算法]]

评分预测问题之所以虽然小众却十分重要，这一点得益于十多年前 Netflix Prize 的那一百万美元的悬赏效应。


** [[https://time.geekbang.org/column/article/5033][【矩阵分解】Facebook是怎么为十亿人互相推荐好友的]]

在实际应用中，交替最小二乘更常用一些，这也是社交巨头 Facebook 在他们的推荐系统中选择的主要矩阵分解方法...


** [[https://time.geekbang.org/column/article/5055][【矩阵分解】如果关注排序效果，那么这个模型可以帮到你]]

矩阵分解在推荐系统中的地位非常崇高，恐怕本专栏介绍的其他算法模型都不能轻易地撼动它。它既有协同过滤的血统...


** [[https://time.geekbang.org/column/article/5365][【模型融合】经典模型融合办法：线性模型和树模型的组合拳]]

挖掘的工作就是对用户和物品做非常深入的结构化分析，庖丁解牛一样，各个角度各个层面的特征都被呈现出来，并且...


** [[https://time.geekbang.org/column/article/5387][【模型融合】一网打尽协同过滤、矩阵分解和线性模型]]

因子分解机最早提出在 2010 年，在一些数据挖掘比赛中都取得了很好的成绩，后来被引入工业界做模型融合，也表...


** [[https://time.geekbang.org/column/article/5406][【模型融合】深度和宽度兼具的融合模型 Wide and Deep]]

将传统的“宽模型”和新的“深模型”结合，虽然更多的是一种工程上的创新，但是非常有实用性，模型也容易很理解...


** [[https://time.geekbang.org/column/article/5594][【MAB问题】简单却有效的Bandit算法]]

Bandit 算法把每个用户看成一个多变的环境，待推荐的物品就如同赌场里老虎机的摇臂，如果推荐了符合用户心目中...


** [[https://time.geekbang.org/column/article/5607][【MAB问题】结合上下文信息的Bandit算法]]

Bandit 算法用的是一种“走一步看一步”的思路，这一点看上去非常佛系，似乎一点都不如机器学习深度学习那样厚...


** [[https://time.geekbang.org/column/article/5610][【MAB问题】如何将Bandit算法与协同过滤结合使用]]

整个专栏的 Bandit 算法系列，主要是解决推荐系统中的冷启动和 EE 问题。Bandit 算法是公认的一种比较好的...


** [[https://time.geekbang.org/column/article/5843][【深度学习】深度学习在推荐系统中的应用有哪些?]]

经过这些年学界和业界的不断尝试，深度学习在推荐系统中已经有了很多成功的应用。那么，到底深度学习在推荐系统...


** [[https://time.geekbang.org/column/article/5916][【深度学习】用RNN构建个性化音乐播单]]

在深度学习大火之后，对时间序列建模被提上议事日程，业界有很多尝试，今天以Spotify的音乐推荐为例，介绍循环...


** [[https://time.geekbang.org/column/article/5933][【其他应用算法】构建一个科学的排行榜体系]]

一个新用户来了，什么数据都还没有，推荐系统对其一无所知。这时候，你就需要一个排行榜了。


** [[https://time.geekbang.org/column/article/6177][【其他应用算法】实用的加权采样算法]]

今天介绍的算法非常简单，但是在推荐系统中有很多的用途。尤其是面对的数据需要采样、需要有所变化时，加权采样...


** [[https://time.geekbang.org/column/article/6186][【其他应用算法】推荐候选池的去重策略]]

推荐系统中，虽然我们十分关心推荐匹配的效果，但是别忘了，对原始内容的挖掘和清洗往往更加重要。这其中就包括...


** [[https://time.geekbang.org/column/article/6195][【常见架构】典型的信息流架构是什么样的]]

从今天起，我们不再单独介绍推荐算法的原理，而是开始进入一个新的模块——工程篇。


** [[https://time.geekbang.org/column/article/6495][【常见架构】Netflix个性化推荐架构]]

实际上，工程实现才是推荐系统的骨架，如果没有很好的软件实现，算法不能落地产生效果，更不能让推荐系统往更好...


** [[https://time.geekbang.org/column/article/6499][【常见架构】总览推荐架构和搜索、广告的关系]]

今天我们提到了推荐架构和搜索、广告的关系，并将三者分别作了对比。这三者有统一的可能性，而且不低。如果要统...


** [[https://time.geekbang.org/column/article/6506][【关键模块】巧妇难为无米之炊：数据采集关键要素]]

采集数据需要首先梳理好自己的数据有哪些，本文不是帮你梳理你的自己的产品中有哪些数据，而是告诉你看推荐系统...


** [[https://time.geekbang.org/column/article/6630][【关键模块】让你的推荐系统反应更快：实时推荐]]

实时推荐有三个层次，很多非工程师的朋友们常常脑海里想象的实时推荐实际上只是第二层次，也就是实时更新特征，...


** [[https://time.geekbang.org/column/article/6799][【关键模块】让数据驱动落地，你需要一个实验平台]]

实验平台是推荐系统要做到数据驱动必不可少的东西，但是如何做到科学高效快速地做实验呢？


** [[https://time.geekbang.org/column/article/6803][【关键模块】 推荐系统服务化、存储选型及API设计]]

对于认识一个推荐系统来说，还差最后一个问题需要解决，那就是：万事俱备，如何给用户提供一个真正的在线推荐服...


** [[https://time.geekbang.org/column/article/7181][【效果保证】推荐系统的测试方法及常用指标介绍]]

面对推荐系统这样一个有诸多复杂因素联动起作用的系统，要时时刻刻知道它好不好，健不健康，你同样需要掌握一些...


** [[https://time.geekbang.org/column/article/7188][【效果保证】道高一尺魔高一丈：推荐系统的攻防]]

推荐系统也是一种软件，只要是软件，就一定有安全问题，推荐系统也不能免俗。


** [[https://time.geekbang.org/column/article/7204][【开源工具】和推荐系统有关的开源工具及框架介绍]]

有别于介绍一个笼统的“推荐系统”，我更倾向于把粒度和焦点再缩小一下，本文按照专栏的目录给你梳理一遍各个模...


** [[https://time.geekbang.org/column/article/7623][【产品篇】推荐系统在互联网产品商业链条中的地位]]

一个完整的推荐系统一定是置身商业世界中，而不是只在学术界撒野，在商业世界里，就应该带一点“功利”的眼光看...


** [[https://time.geekbang.org/column/article/7653][【产品篇】说说信息流的前世今生]]

在今天，最厉害的注意力存储器就是信息流，尤其是个性化信息流，也叫做兴趣Feed，这也是推荐系统的一种。


** [[https://time.geekbang.org/column/article/7657][【团队篇】组建推荐团队及工程师的学习路径]]

推荐系统工程师的能力，一共有三个层次，建设起来由易到难，需要不断刻意练习才可能有较大的能力进步，这一点我...


** [[https://time.geekbang.org/column/article/8113][推荐系统的参考阅读]]

专栏主体内容已经结束了，在专栏写作的过程中，我阅读了很多业界公开的资料，我觉得有必要整理出来，供想要阅读...


** [[https://time.geekbang.org/column/article/8117][【尾声】遇“荐”之后，江湖再见]]

如果要说整个写专栏过程中的一些感悟和心路，那就概括为三个“如”字吧。这三个“如”字，是三种痛苦，同时，也...

